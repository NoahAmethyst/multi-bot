// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: tg_quiz.proto

package tg_quiz_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Jobs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jobs map[string]*Job `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Jobs) Reset() {
	*x = Jobs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tg_quiz_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Jobs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jobs) ProtoMessage() {}

func (x *Jobs) ProtoReflect() protoreflect.Message {
	mi := &file_tg_quiz_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jobs.ProtoReflect.Descriptor instead.
func (*Jobs) Descriptor() ([]byte, []int) {
	return file_tg_quiz_proto_rawDescGZIP(), []int{0}
}

func (x *Jobs) GetJobs() map[string]*Job {
	if x != nil {
		return x.Jobs
	}
	return nil
}

type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId       string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	QuizId      string `protobuf:"bytes,2,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
	AppType     int32  `protobuf:"varint,3,opt,name=app_type,json=appType,proto3" json:"app_type,omitempty"`
	ExecuteTime int64  `protobuf:"varint,4,opt,name=execute_time,json=executeTime,proto3" json:"execute_time,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tg_quiz_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_tg_quiz_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_tg_quiz_proto_rawDescGZIP(), []int{1}
}

func (x *Job) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *Job) GetQuizId() string {
	if x != nil {
		return x.QuizId
	}
	return ""
}

func (x *Job) GetAppType() int32 {
	if x != nil {
		return x.AppType
	}
	return 0
}

func (x *Job) GetExecuteTime() int64 {
	if x != nil {
		return x.ExecuteTime
	}
	return 0
}

type QuizQuestionMemory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//quizId- question ids
	QuizQuestion map[string]*Questions `protobuf:"bytes,1,rep,name=quiz_question,json=quizQuestion,proto3" json:"quiz_question,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//questionId - quizId
	QuestionQuiz map[string]string `protobuf:"bytes,4,rep,name=question_quiz,json=questionQuiz,proto3" json:"question_quiz,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QuizQuestionMemory) Reset() {
	*x = QuizQuestionMemory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tg_quiz_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuizQuestionMemory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuizQuestionMemory) ProtoMessage() {}

func (x *QuizQuestionMemory) ProtoReflect() protoreflect.Message {
	mi := &file_tg_quiz_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuizQuestionMemory.ProtoReflect.Descriptor instead.
func (*QuizQuestionMemory) Descriptor() ([]byte, []int) {
	return file_tg_quiz_proto_rawDescGZIP(), []int{2}
}

func (x *QuizQuestionMemory) GetQuizQuestion() map[string]*Questions {
	if x != nil {
		return x.QuizQuestion
	}
	return nil
}

func (x *QuizQuestionMemory) GetQuestionQuiz() map[string]string {
	if x != nil {
		return x.QuestionQuiz
	}
	return nil
}

type QuizParticipateMemory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//quizId - userId - correctNum
	QuizCorrectUser map[string]*QuizUserCorrect `protobuf:"bytes,2,rep,name=quiz_correct_user,json=quizCorrectUser,proto3" json:"quiz_correct_user,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//question correct
	QuestionCorrectUser map[string]*QuestionCorrectUsers `protobuf:"bytes,8,rep,name=question_correct_user,json=questionCorrectUser,proto3" json:"question_correct_user,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//quizId -userId - participate
	QuizParticipate map[string]*Participate `protobuf:"bytes,3,rep,name=quiz_participate,json=quizParticipate,proto3" json:"quiz_participate,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QuizParticipateMemory) Reset() {
	*x = QuizParticipateMemory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tg_quiz_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuizParticipateMemory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuizParticipateMemory) ProtoMessage() {}

func (x *QuizParticipateMemory) ProtoReflect() protoreflect.Message {
	mi := &file_tg_quiz_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuizParticipateMemory.ProtoReflect.Descriptor instead.
func (*QuizParticipateMemory) Descriptor() ([]byte, []int) {
	return file_tg_quiz_proto_rawDescGZIP(), []int{3}
}

func (x *QuizParticipateMemory) GetQuizCorrectUser() map[string]*QuizUserCorrect {
	if x != nil {
		return x.QuizCorrectUser
	}
	return nil
}

func (x *QuizParticipateMemory) GetQuestionCorrectUser() map[string]*QuestionCorrectUsers {
	if x != nil {
		return x.QuestionCorrectUser
	}
	return nil
}

func (x *QuizParticipateMemory) GetQuizParticipate() map[string]*Participate {
	if x != nil {
		return x.QuizParticipate
	}
	return nil
}

type QuizPlatMemory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//questionId - messageId
	QuestionMsg map[string]int64 `protobuf:"bytes,5,rep,name=question_msg,json=questionMsg,proto3" json:"question_msg,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	//quizId - groupId
	ChatMemory map[string]int64 `protobuf:"bytes,6,rep,name=chat_memory,json=chatMemory,proto3" json:"chat_memory,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	//poll record
	Memory map[string]*Poll `protobuf:"bytes,7,rep,name=memory,proto3" json:"memory,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QuizPlatMemory) Reset() {
	*x = QuizPlatMemory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tg_quiz_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuizPlatMemory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuizPlatMemory) ProtoMessage() {}

func (x *QuizPlatMemory) ProtoReflect() protoreflect.Message {
	mi := &file_tg_quiz_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuizPlatMemory.ProtoReflect.Descriptor instead.
func (*QuizPlatMemory) Descriptor() ([]byte, []int) {
	return file_tg_quiz_proto_rawDescGZIP(), []int{4}
}

func (x *QuizPlatMemory) GetQuestionMsg() map[string]int64 {
	if x != nil {
		return x.QuestionMsg
	}
	return nil
}

func (x *QuizPlatMemory) GetChatMemory() map[string]int64 {
	if x != nil {
		return x.ChatMemory
	}
	return nil
}

func (x *QuizPlatMemory) GetMemory() map[string]*Poll {
	if x != nil {
		return x.Memory
	}
	return nil
}

type Questions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *Questions) Reset() {
	*x = Questions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tg_quiz_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Questions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Questions) ProtoMessage() {}

func (x *Questions) ProtoReflect() protoreflect.Message {
	mi := &file_tg_quiz_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Questions.ProtoReflect.Descriptor instead.
func (*Questions) Descriptor() ([]byte, []int) {
	return file_tg_quiz_proto_rawDescGZIP(), []int{5}
}

func (x *Questions) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type QuizUserCorrect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CorrectUser map[int64]int64 `protobuf:"bytes,1,rep,name=correct_user,json=correctUser,proto3" json:"correct_user,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *QuizUserCorrect) Reset() {
	*x = QuizUserCorrect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tg_quiz_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuizUserCorrect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuizUserCorrect) ProtoMessage() {}

func (x *QuizUserCorrect) ProtoReflect() protoreflect.Message {
	mi := &file_tg_quiz_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuizUserCorrect.ProtoReflect.Descriptor instead.
func (*QuizUserCorrect) Descriptor() ([]byte, []int) {
	return file_tg_quiz_proto_rawDescGZIP(), []int{6}
}

func (x *QuizUserCorrect) GetCorrectUser() map[int64]int64 {
	if x != nil {
		return x.CorrectUser
	}
	return nil
}

type Participate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Participate map[int64]bool `protobuf:"bytes,1,rep,name=participate,proto3" json:"participate,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *Participate) Reset() {
	*x = Participate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tg_quiz_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Participate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Participate) ProtoMessage() {}

func (x *Participate) ProtoReflect() protoreflect.Message {
	mi := &file_tg_quiz_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Participate.ProtoReflect.Descriptor instead.
func (*Participate) Descriptor() ([]byte, []int) {
	return file_tg_quiz_proto_rawDescGZIP(), []int{7}
}

func (x *Participate) GetParticipate() map[int64]bool {
	if x != nil {
		return x.Participate
	}
	return nil
}

type QuestionCorrectUsers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *QuestionCorrectUsers) Reset() {
	*x = QuestionCorrectUsers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tg_quiz_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionCorrectUsers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionCorrectUsers) ProtoMessage() {}

func (x *QuestionCorrectUsers) ProtoReflect() protoreflect.Message {
	mi := &file_tg_quiz_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionCorrectUsers.ProtoReflect.Descriptor instead.
func (*QuestionCorrectUsers) Descriptor() ([]byte, []int) {
	return file_tg_quiz_proto_rawDescGZIP(), []int{8}
}

func (x *QuestionCorrectUsers) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type Poll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CorrectOption int64  `protobuf:"varint,2,opt,name=correct_option,json=correctOption,proto3" json:"correct_option,omitempty"`
	PollType      string `protobuf:"bytes,3,opt,name=poll_type,json=pollType,proto3" json:"poll_type,omitempty"`
}

func (x *Poll) Reset() {
	*x = Poll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tg_quiz_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Poll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Poll) ProtoMessage() {}

func (x *Poll) ProtoReflect() protoreflect.Message {
	mi := &file_tg_quiz_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Poll.ProtoReflect.Descriptor instead.
func (*Poll) Descriptor() ([]byte, []int) {
	return file_tg_quiz_proto_rawDescGZIP(), []int{9}
}

func (x *Poll) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Poll) GetCorrectOption() int64 {
	if x != nil {
		return x.CorrectOption
	}
	return 0
}

func (x *Poll) GetPollType() string {
	if x != nil {
		return x.PollType
	}
	return ""
}

var File_tg_quiz_proto protoreflect.FileDescriptor

var file_tg_quiz_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x74, 0x67, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x76, 0x0a, 0x04, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x29,
	0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4a, 0x6f, 0x62, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x1a, 0x43, 0x0a, 0x09, 0x4a, 0x6f, 0x62,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4a, 0x6f, 0x62, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x73,
	0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71,
	0x75, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xcc, 0x02, 0x0a, 0x12, 0x51, 0x75, 0x69, 0x7a, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x50, 0x0a, 0x0d, 0x71, 0x75,
	0x69, 0x7a, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2e, 0x51, 0x75, 0x69,
	0x7a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x71, 0x75, 0x69, 0x7a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0d,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x69, 0x7a,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2e, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x69, 0x7a, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x69, 0x7a, 0x1a, 0x51,
	0x0a, 0x11, 0x51, 0x75, 0x69, 0x7a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x69,
	0x7a, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xd8, 0x04, 0x0a, 0x15, 0x51, 0x75, 0x69, 0x7a, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x5d, 0x0a, 0x11,
	0x71, 0x75, 0x69, 0x7a, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x51, 0x75, 0x69, 0x7a, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x71, 0x75, 0x69, 0x7a,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x69, 0x0a, 0x15, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x13, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x10, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2e, 0x51,
	0x75, 0x69, 0x7a, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0f, 0x71, 0x75, 0x69, 0x7a, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x74, 0x65, 0x1a, 0x5a, 0x0a, 0x14, 0x51, 0x75, 0x69, 0x7a, 0x43, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x63, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x56, 0x0a, 0x14, 0x51, 0x75, 0x69, 0x7a, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa5, 0x03,
	0x0a, 0x0e, 0x51, 0x75, 0x69, 0x7a, 0x50, 0x6c, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x12, 0x49, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x67,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51,
	0x75, 0x69, 0x7a, 0x50, 0x6c, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2e, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x46, 0x0a, 0x0b, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x50, 0x6c, 0x61,
	0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x69, 0x7a,
	0x50, 0x6c, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x1a, 0x3e,
	0x0a, 0x10, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d,
	0x0a, 0x0f, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a,
	0x0b, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x21,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1d, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x0f, 0x51, 0x75, 0x69, 0x7a, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x12, 0x4a, 0x0a, 0x0c, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x1a, 0x3e, 0x0a, 0x10, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x94, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x65, 0x1a, 0x3e, 0x0a, 0x10, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x28, 0x0a, 0x14, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x5a, 0x0a, 0x04, 0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x18, 0x5a, 0x16, 0x74, 0x67, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x70, 0x62, 0x2f,
	0x3b, 0x74, 0x67, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_tg_quiz_proto_rawDescOnce sync.Once
	file_tg_quiz_proto_rawDescData = file_tg_quiz_proto_rawDesc
)

func file_tg_quiz_proto_rawDescGZIP() []byte {
	file_tg_quiz_proto_rawDescOnce.Do(func() {
		file_tg_quiz_proto_rawDescData = protoimpl.X.CompressGZIP(file_tg_quiz_proto_rawDescData)
	})
	return file_tg_quiz_proto_rawDescData
}

var file_tg_quiz_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_tg_quiz_proto_goTypes = []interface{}{
	(*Jobs)(nil),                  // 0: proto.Jobs
	(*Job)(nil),                   // 1: proto.Job
	(*QuizQuestionMemory)(nil),    // 2: proto.QuizQuestionMemory
	(*QuizParticipateMemory)(nil), // 3: proto.QuizParticipateMemory
	(*QuizPlatMemory)(nil),        // 4: proto.QuizPlatMemory
	(*Questions)(nil),             // 5: proto.Questions
	(*QuizUserCorrect)(nil),       // 6: proto.QuizUserCorrect
	(*Participate)(nil),           // 7: proto.Participate
	(*QuestionCorrectUsers)(nil),  // 8: proto.QuestionCorrectUsers
	(*Poll)(nil),                  // 9: proto.Poll
	nil,                           // 10: proto.Jobs.JobsEntry
	nil,                           // 11: proto.QuizQuestionMemory.QuizQuestionEntry
	nil,                           // 12: proto.QuizQuestionMemory.QuestionQuizEntry
	nil,                           // 13: proto.QuizParticipateMemory.QuizCorrectUserEntry
	nil,                           // 14: proto.QuizParticipateMemory.QuestionCorrectUserEntry
	nil,                           // 15: proto.QuizParticipateMemory.QuizParticipateEntry
	nil,                           // 16: proto.QuizPlatMemory.QuestionMsgEntry
	nil,                           // 17: proto.QuizPlatMemory.ChatMemoryEntry
	nil,                           // 18: proto.QuizPlatMemory.MemoryEntry
	nil,                           // 19: proto.QuizUserCorrect.CorrectUserEntry
	nil,                           // 20: proto.Participate.ParticipateEntry
}
var file_tg_quiz_proto_depIdxs = []int32{
	10, // 0: proto.Jobs.jobs:type_name -> proto.Jobs.JobsEntry
	11, // 1: proto.QuizQuestionMemory.quiz_question:type_name -> proto.QuizQuestionMemory.QuizQuestionEntry
	12, // 2: proto.QuizQuestionMemory.question_quiz:type_name -> proto.QuizQuestionMemory.QuestionQuizEntry
	13, // 3: proto.QuizParticipateMemory.quiz_correct_user:type_name -> proto.QuizParticipateMemory.QuizCorrectUserEntry
	14, // 4: proto.QuizParticipateMemory.question_correct_user:type_name -> proto.QuizParticipateMemory.QuestionCorrectUserEntry
	15, // 5: proto.QuizParticipateMemory.quiz_participate:type_name -> proto.QuizParticipateMemory.QuizParticipateEntry
	16, // 6: proto.QuizPlatMemory.question_msg:type_name -> proto.QuizPlatMemory.QuestionMsgEntry
	17, // 7: proto.QuizPlatMemory.chat_memory:type_name -> proto.QuizPlatMemory.ChatMemoryEntry
	18, // 8: proto.QuizPlatMemory.memory:type_name -> proto.QuizPlatMemory.MemoryEntry
	19, // 9: proto.QuizUserCorrect.correct_user:type_name -> proto.QuizUserCorrect.CorrectUserEntry
	20, // 10: proto.Participate.participate:type_name -> proto.Participate.ParticipateEntry
	1,  // 11: proto.Jobs.JobsEntry.value:type_name -> proto.Job
	5,  // 12: proto.QuizQuestionMemory.QuizQuestionEntry.value:type_name -> proto.Questions
	6,  // 13: proto.QuizParticipateMemory.QuizCorrectUserEntry.value:type_name -> proto.QuizUserCorrect
	8,  // 14: proto.QuizParticipateMemory.QuestionCorrectUserEntry.value:type_name -> proto.QuestionCorrectUsers
	7,  // 15: proto.QuizParticipateMemory.QuizParticipateEntry.value:type_name -> proto.Participate
	9,  // 16: proto.QuizPlatMemory.MemoryEntry.value:type_name -> proto.Poll
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_tg_quiz_proto_init() }
func file_tg_quiz_proto_init() {
	if File_tg_quiz_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tg_quiz_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Jobs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tg_quiz_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tg_quiz_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuizQuestionMemory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tg_quiz_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuizParticipateMemory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tg_quiz_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuizPlatMemory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tg_quiz_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Questions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tg_quiz_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuizUserCorrect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tg_quiz_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Participate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tg_quiz_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionCorrectUsers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tg_quiz_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Poll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tg_quiz_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tg_quiz_proto_goTypes,
		DependencyIndexes: file_tg_quiz_proto_depIdxs,
		MessageInfos:      file_tg_quiz_proto_msgTypes,
	}.Build()
	File_tg_quiz_proto = out.File
	file_tg_quiz_proto_rawDesc = nil
	file_tg_quiz_proto_goTypes = nil
	file_tg_quiz_proto_depIdxs = nil
}
